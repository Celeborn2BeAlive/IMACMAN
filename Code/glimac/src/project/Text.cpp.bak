#include "project/Text.hpp"

void Text::draw_bitmap( FT_Bitmap* bitmap, FT_Int x, FT_Int y)
{
  FT_Int  i, j, p, q;
  FT_Int  x_max = x + bitmap->width;
  FT_Int  y_max = y + bitmap->rows;


  for ( i = x, p = 0; i < x_max; i++, p++ )
  {
    for ( j = y, q = 0; j < y_max; j++, q++ )
    {
      image[j][i] |= bitmap->buffer[q * bitmap->width + p];
    }
  }
}


void Text::show_image()
{
  
}


int Text::drawText()
{
  FT_Library    library;
  FT_Face       face;

  FT_GlyphSlot  slot;
  FT_Matrix     matrix;                 /* transformation matrix */
  FT_Vector     pen;                    /* untransformed origin  */
  FT_Error      error;

  std::string         filename;
  std::string         text;

  double        angle;
  int           target_HEIGHT;
  int           n, num_chars;

  filename      = "../Code/assets/fonts/DejaVuSans.ttf";                           /* first argument     */
  text          = "Hello";                           /* second argument    */
  num_chars     = text.size();
  angle         = ( 25.0 / 360 ) * 3.14159 * 2;      /* use 25 degrees     */
  target_HEIGHT = 720;

  FT_Init_FreeType( &library );              /* initialize library */

  FT_New_Face( library, filename.data(), 0, &face );/* create face object */

  /* use 50pt at 100dpi */
  FT_Set_Char_Size( face, 50 * 64, 0,
                            100, 0 );                /* set character size */

  slot = face->glyph;

  /* set up matrix */
  matrix.xx = (FT_Fixed)( cos( angle ) * 0x10000L );
  matrix.xy = (FT_Fixed)(-sin( angle ) * 0x10000L );
  matrix.yx = (FT_Fixed)( sin( angle ) * 0x10000L );
  matrix.yy = (FT_Fixed)( cos( angle ) * 0x10000L );

  /* the pen position in 26.6 cartesian space coordinates; */
  /* start at (300,200) relative to the upper left corner  */
  pen.x = 300 * 64;
  pen.y = ( target_HEIGHT - 200 ) * 64;

  for ( n = 0; n < num_chars; n++ )
  {
    /* set transformation */
    FT_Set_Transform( face, &matrix, &pen );

    /* load glyph image into the slot (erase previous one) */
    FT_Load_Char( face, text[n], FT_LOAD_RENDER );

    /* now, draw to our target surface (convert position) */
    draw_bitmap( &slot->bitmap,
                 slot->bitmap_left,
                 target_HEIGHT - slot->bitmap_top);

    /* increment pen position */
    pen.x += slot->advance.x;
    pen.y += slot->advance.y;
  }

  show_image();

  FT_Done_Face    ( face );
  FT_Done_FreeType( library );

  return 0;
}
